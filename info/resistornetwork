#!/usr/bin/octave -q

source "libresist.oct"



##########################################################################
# MAIN

# list of resistor values that we want to choose from
#r = [ 22000 19000 15000 10000 8200 6800 4700 3900 3300 2700 2200 1900 1500 1200 1000 820 680 470 330 220 190 150 100 ];
#r = [ 15000 8200 5600 4700 2700 220];
#r = [ 15000 12000 10000 8200 6800 4700 3900 3300 2700 2200 1900 1500 1200 1000 820 680 470 330 220 190 150 100 ];
#r = [ 56000 47000 39000 33000 27000 22000 19000 15000 12000 10000 8200 6800 4700 3900 3300 2700 2200 1900 1500 1200 1000 820 680 470 390 330 270 220 190 150 100 ];
r = [ 33000 12000 10000 8200 2000 330 ];

bestrank = 1.000;
bestcenter = 0;
bestresistors = "";

# we need to loop through all resistors in R, choosing any 1-6 of them, and computing the resistance
printf("Computing permutation list...");
p = nchoosek(r, 6);
printf("done.\n");

# create a sinewave
printf("Computing sinewave to generate...");
resolution = 15;
sw = [0:359/resolution] * resolution;
sw = sin(sw * pi / 180) + 1;
printf("done.\n");

# now go through this list, and call par_resistance on it and store the results
results = [];
for i = 1:size(p)(1);
	# assign to a var so our code doesn't get uglier
	a = p(i,:);

	# compute the resistances of that set
	b = compute_resistances(a);
	b = sort(b);

	for j = 1:size(b)(2);

		c = compare_to_sine(b, b(j), sw);
		if (c <= bestrank);
			bestresistors = a;
			bestcenter = b(j);
			bestrank = c;
			printf("\n-----------------------------------------\n");
			brstr = sprintf("%d ", bestresistors);
			printf("Resistors: %s\n", brstr);
			printf("Center: %f\n", bestcenter);
			printf("Match Rank: %f\n\n", bestrank);
		endif
	endfor

	printf(".");
endfor

printf("\n-----------------------------------------\n");
brstr = sprintf("%d ", bestresistors);
printf("Resistors: %s\n", brstr);
printf("Center: %f\n", bestcenter);
printf("Match Rank: %f\n\n", bestrank);

